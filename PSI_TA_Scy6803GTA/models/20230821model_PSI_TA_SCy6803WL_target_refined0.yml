# default_megacomplex: decay
dataset_groups:
  default:
    residual_function: variable_projection
    link_clp: True

dataset:
  # TA datasets
  670TR1:
    # megacomplex: [complex670]
    megacomplex: [complex670, doas, artifact670]
    # megacomplex_scale: [scalem.1,scalem.freeChl]
    initial_concentration: input670
    irf: irf1
    scale: scale.670
  670TR2:
    # megacomplex: [complex670TR2]
    megacomplex: [complex670]
    # megacomplex_scale: [scalem.1,scalem.freeChl]
    initial_concentration: input670
    irf: irf1
    scale: scale.670TR2
  700TR1:
    # megacomplex: [complex700]
    megacomplex: [complex700, artifact700]
    # megacomplex_scale: [scalem.1]
    initial_concentration: input700
    irf: irf2
    scale: scale.700
  700TR2:
    # megacomplex: [complex700TR2]
    megacomplex: [complex700]
    # megacomplex_scale: [scalem.1]
    initial_concentration: input700
    irf: irf2
    scale: scale.700TR2
  Red1SADS:
    megacomplex:
      - mc2
    scale: scale.Red1SADS
  Red2SADS:
    megacomplex:
      - mc3
    scale: scale.Red2SADS
  WLRCSADS:
    megacomplex:
      - mc4
    scale: scale.WLRCSADS
  WLRP1SADS:
    megacomplex:
      - mc5
    scale: scale.WLRP1SADS

megacomplex:
  # unique for TA
  complex670:
    type: decay
    k_matrix: [kmBulkAnt1, kmBulkWL, kmWLRC, kmWLRP670, kfreeChl]
  complex700:
    type: decay
    k_matrix: [kmBulkAnt1, kmBulkWL, kmWLRC, kmWLRP700]
  mc2:
    dimension: time
    target: Red1
    type: clp-guide
  mc3:
    dimension: time
    target: Red2
    type: clp-guide
  mc4:
    dimension: time
    target: WLRC
    type: clp-guide
  mc5:
    dimension: time
    target: WLRP1
    type: clp-guide
  doas:
    type: damped-oscillation
    labels: [osc1]
    frequencies: [osc.freq.1]
    rates: [osc.rates.1]
  artifact670:
    type: coherent-artifact
    order: 3
    width: artifact.CAwidth
  artifact700:
    type: coherent-artifact
    order: 3

# how can i now express that the first 20 lines
# are common for complexes 1-5, and the next 11 lines
# are common for complexes 1-4? how can i specify in chunks?
# note that earlier definition will override later definition
k_matrix:
  # xrates correction for different numbers of Bulk Chl a pigments (78 vs 70)
  # yrates correction for different temperatures (6 vs 20 C)
  kfreeChl:
    matrix:
      (freeChl, freeChl): rates.kF
  kmBulkWL:
    matrix:
      (Bulk, Red1): rates.ToBulkFromRed1
      (Red1, Bulk): rates.ToRed1FromBulk
      (Bulk, Red2): rates.ToBulkFromRed2
      (Red2, Bulk): rates.ToRed2FromBulk
      (Red1, Red1): rates.kF
      (Red2, Red2): rates.kF
      (Bulk, Bulk): rates.kF
  kmWLRC:
    matrix:
      (WLRC, WLRP1): rates.ToWLRCFromWLRP1
      (WLRP1, WLRC): rates.ToWLRP1FromWLRC
      (Bulk, WLRC): rates.ToBulkFromWLRC
      (WLRC, Bulk): rates.ToWLRCFromBulk
  kmWLRP670:
    matrix:
      (WLRP2, WLRP1): rates.ToWLRP2FromWLRP1
      (WLRP2, WLRP2): rates.ToWLRP2FromWLRP2
  kmWLRP700:
    matrix:
      (WLRP2a, WLRP1): rates.ToWLRP2FromWLRP1
      (WLRP2a, WLRP2a): rates.ToWLRP2FromWLRP2
  kmBulkAnt1:
    matrix:
      (Bulk, Ant1): rates.ToBulkFromAnt1
      (Ant1, Bulk): rates.ToAnt1FromBulk

initial_concentration:
  # unique for TA
  input670:
    compartments: [Ant1, Bulk, Red1, Red2, WLRC, WLRP1, WLRP2, freeChl]
    parameters:
      [
        input670.Ant1,
        input670.Bulk,
        input670.Red1,
        input670.Red2,
        input670.WLRC,
        input670.0,
        input670.0,
        input670.freeChl,
      ]
  input700:
    compartments: [Ant1, Bulk, Red1, Red2, WLRC, WLRP1, WLRP2a]
    parameters:
      [
        input700.Ant1,
        input700.Bulk,
        input700.Red1,
        input700.Red2,
        input700.WLRC,
        input700.0,
        input700.0,
      ]

# 6 needed ! does this mean that the penalty is s1-s2*area.1 ?
# clp_penalties:
#   - type: equal_area
#     source: Red1
#     source_intervals: [[690, 740]]
#     target: Bulk
#     target_intervals: [[675, 770]]
#     parameter: area.Bulk
#     weight: 0.06
#   - type: equal_area
#     source: Red1
#     source_intervals: [[690, 740]]
#     target: Red2
#     target_intervals: [[700, 780]]
#     parameter: area.1
#     weight: 0.06
#   - type: equal_area
#     source: Red1
#     source_intervals: [[690, 740]]
#     target: WLRC
#     target_intervals: [[685, 725]]
#     parameter: area.1
#     weight: 0.06
#

clp_relations:
  #
  - source: WLRP2
    target: WLRP2a
    parameter: rel.r1
    interval: [[0, 1000]]

clp_constraints:
  # - type: zero
  #   target: Ant1
  #   interval:
  #     - [700, 715]
  - type: zero
    target: freeChl
    interval:
      - [690, 731]
  - type: zero
    target: freeChl
    interval:
      - [750, 760]

# it is implicitly normalized, i.e. divided by sum of irfscale parameters
irf:
  irf1:
    type: spectral-gaussian
    center: irf.center1
    width: irf.width1
    dispersion_center: irf.dispcenter
    center_dispersion_coefficients: [irf.disp1]
    model_dispersion_with_wavenumber: true
  irf2:
    type: spectral-gaussian
    center: irf.center2
    width: irf.width2
    dispersion_center: irf.dispcenter
    center_dispersion_coefficients: [irf.disp1]
    model_dispersion_with_wavenumber: true

weights:
  # unique for TA
  - datasets: [Red1SADS]
    # if omitted the weight applies everywhere
    global_interval: [100, 1000]
    # this would be time
    # model_interval: [100, 1000]
    value: 6.e-3
  - datasets: [Red2SADS]
    global_interval: [100, 1000]
    value: 6.e-3
  - datasets: [WLRCSADS]
    global_interval: [100, 1000]
    value: 6.e-3
  - datasets: [WLRP1SADS]
    global_interval: [100, 1000]
    value: 6.e-3
