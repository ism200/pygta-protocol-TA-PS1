# default_megacomplex: decay
dataset_groups:
  default:
    residual_function: variable_projection
    link_clp: True

dataset:
  # TA datasets
  670TR1:
    megacomplex: [complex670, artifact670]
    # megacomplex: [complex670, doas, artifact670]
    # megacomplex_scale: [scalem.1,scalem.freeChl]
    initial_concentration: input670
    irf: irf1
    scale: scale.670
  670TR2:
    # megacomplex: [complex670TR2]
    megacomplex: [complex670]
    # megacomplex_scale: [scalem.1,scalem.freeChl]
    initial_concentration: input670
    irf: irf1
    scale: scale.670TR2
  700TR1:
    megacomplex: [complex700, artifact700]
    # megacomplex: [complex700, artifact700]
    # megacomplex_scale: [scalem.1]
    initial_concentration: input700
    irf: irf2
    scale: scale.700
  700TR2:
    # megacomplex: [complex700TR2]
    megacomplex: [complex700]
    # megacomplex_scale: [scalem.1]
    initial_concentration: input700
    irf: irf2
    scale: scale.700TR2

megacomplex:
  # unique for TA
  complex670:
    type: decay
    # k_matrix: [kmBulkAnt1, kmWL, kfreeChl]
    k_matrix: [kmBulkAnt1, kmWL]
  complex700:
    type: decay
    k_matrix: [kmWL]
  artifact670:
    type: coherent-artifact
    order: 3
    # width: artifact.CAwidth
  artifact700:
    type: coherent-artifact
    order: 3

# how can i now express that the first 20 lines
# are common for complexes 1-5, and the next 11 lines
# are common for complexes 1-4? how can i specify in chunks?
# note that earlier definition will override later definition
k_matrix:
  # xrates correction for different numbers of Bulk Chl a pigments (78 vs 70)
  # yrates correction for different temperatures (6 vs 20 C)
  # kfreeChl:
  #   matrix:
  #     (freeChl, freeChl): rates.kF
  kmWL:
    matrix:
      (Bulk, Red): rates.ToBulkFromRed
      (Red, Bulk): rates.ToRedFromBulk
      # (Red, Red): rates.kF
      # (Bulk, Bulk): rates.kF
      # (RC, RC): rates.kF
      # (RC, RP1): rates.ToRCFromRP1
      (RP1, RC): rates.ToRP1FromRC
      (Bulk, RC): rates.ToBulkFromRC
      (RC, Bulk): rates.ToRCFromBulk
      (RP2, RP1): rates.ToRP2FromRP1
      (RP2, RP2): rates.ToRP2FromRP2
      # (RP1, Bulk): rates.ToRP1FromBulk
  kmBulkAnt1:
    matrix:
      (Bulk, Ant1): rates.ToBulkFromAnt1
      (Ant1, Bulk): rates.ToAnt1FromBulk

initial_concentration:
  # unique for TA
  input670:
  #   compartments: [Ant1, Bulk, Red, RC, RP1, RP2, freeChl]
    compartments: [Ant1, Bulk, Red, RC, RP1, RP2]
    parameters:
      [
        input670.Ant1,
        input670.Bulk,
        input670.Red,
        input670.RC,
        input670.0,
        input670.0,
  #       input670.freeChl,
      ]
  input700:
    compartments: [Bulk, Red, RC, RP1, RP2]
    # compartments: [Bulk, Red, RP1, RP2]
    parameters:
      [
        input700.Bulk,
        input700.Red,
        input700.RC,
        input700.0,
        input700.0,
      ]

irf:
  irf1:
    type: spectral-gaussian
    center: irf.center1
    width: irf.width1
    dispersion_center: irf.dispcenter
    center_dispersion_coefficients: [irf.disp1]
    model_dispersion_with_wavenumber: true
  irf2:
    type: spectral-gaussian
    center: irf.center2
    width: irf.width2
    dispersion_center: irf.dispcenter
    center_dispersion_coefficients: [irf.disp1]
    model_dispersion_with_wavenumber: true

# weights:
#   # unique for TA
#   - datasets: [RedSADS]
#     # if omitted the weight applies everywhere
#     global_interval: [100, 1000]
#     # this would be time
#     # model_interval: [100, 1000]
#     value: 6.e-5
#     # value: 6.e-3
#   # - datasets: [Red2SADS]
#   #   global_interval: [100, 1000]
#   #   value: 6.e-3
#   - datasets: [RCSADS]
#     global_interval: [100, 1000]
#     # value: 6.e-3
#     value: 6.e-5
#   - datasets: [RP1SADS]
#     global_interval: [100, 1000]
#     # value: 6.e-3
#     value: 6.e-6
